nimTitle	asynciobase	_._/src/asyncio/exports/asynciobase.html	module src/asyncio/exports/asynciobase		0
nim	AsyncIoBase	_._/src/asyncio/exports/asynciobase.html#AsyncIoBase	type AsyncIoBase		6
nim	closed	_._/src/asyncio/exports/asynciobase.html#closed,AsyncIoBase	proc closed(self: AsyncIoBase): bool		39
nim	close	_._/src/asyncio/exports/asynciobase.html#close.e,AsyncIoBase	method close(self: AsyncIoBase)		49
nim	read	_._/src/asyncio/exports/asynciobase.html#read,AsyncIoBase,Natural,Future[void]	proc read(self: AsyncIoBase; count: Natural; cancelFut: Future[void] = nil): Future[\n    string]		90
nim	readAvailable	_._/src/asyncio/exports/asynciobase.html#readAvailable,AsyncIoBase,Natural,Future[void]	proc readAvailable(self: AsyncIoBase; count: Natural; cancelFut: Future[void] = nil): Future[\n    string]		98
nim	readChunk	_._/src/asyncio/exports/asynciobase.html#readChunk,AsyncIoBase,Future[void]	proc readChunk(self: AsyncIoBase; cancelFut: Future[void] = nil): Future[string]		105
nim	readLine	_._/src/asyncio/exports/asynciobase.html#readLine,AsyncIoBase,Future[void]	proc readLine(self: AsyncIoBase; keepNewLine = false; cancelFut: Future[void] = nil): Future[\n    string]		112
nim	readAll	_._/src/asyncio/exports/asynciobase.html#readAll,AsyncIoBase,Future[void]	proc readAll(self: AsyncIoBase; cancelFut: Future[void] = nil): Future[string]		119
nim	write	_._/src/asyncio/exports/asynciobase.html#write,AsyncIoBase,string,Future[void]	proc write(self: AsyncIoBase; data: string; cancelFut: Future[void] = nil): Future[\n    int]		123
nim	writeDiscard	_._/src/asyncio/exports/asynciobase.html#writeDiscard,AsyncIoBase,string,Future[void]	proc writeDiscard(self: AsyncIoBase; data: string; cancelFut: Future[void] = nil): Future[\n    void]		130
nim	cancelAll	_._/src/asyncio/exports/asynciobase.html#cancelAll,AsyncIoBase	proc cancelAll(self: AsyncIoBase): owned(Future[void])		137
nim	clear	_._/src/asyncio/exports/asynciobase.html#clear,AsyncIoBase	proc clear(self: AsyncIoBase; cancelFut = sleepAsync(5)): owned(Future[void])		155
nim	transfer	_._/src/asyncio/exports/asynciobase.html#transfer,AsyncIoBase,AsyncIoBase,Future[void]	proc transfer(src, dest: AsyncIoBase; cancelFut: Future[void] = nil;\n         flushAndCloseAfter = false): Future[void]		163
